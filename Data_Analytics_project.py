# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dQ5hm4hd6F14dlqRj8i-zeQFY-OL2sGE
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
# %pip install openpyxl

df = pd.read_excel('Data analyst Data.xlsx')
display(df.head())

df.describe()

df.info()

num_unique_students = df['First Name'].nunique()
print(f"Number of unique students: {num_unique_students}")

average_cgpa = df['CGPA'].mean()
print(f"Average CGPA: {average_cgpa}")

# Count the occurrences of each graduation year
graduation_year_counts = df['Year of Graduation'].value_counts().sort_index()

# Create a bar plot
plt.figure(figsize=(10, 6))
sns.barplot(x=graduation_year_counts.index, y=graduation_year_counts.values)
plt.title('Distribution of Students Across Graduation Years')
plt.xlabel('Year of Graduation')
plt.ylabel('Number of Students')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Distribution of student's experience with Python programming
plt.figure(figsize=(8, 6))
sns.countplot(data=df, x='Experience with python (Months)', order=df['Experience with python (Months)'].value_counts().index)
plt.title('Distribution of Students by Python Programming Experience')
plt.xlabel('Python Experience')
plt.ylabel('Number of Students')
plt.show()

# Function to convert income ranges to numerical values (midpoints of ranges)
def income_to_numeric(income_range):
    if income_range == '0-2 Lakh':
        return 1  # Midpoint of 0-2 Lakh
    elif income_range == '2-5 Lakh':
        return 3.5  # Midpoint of 2-5 Lakh
    elif income_range == '5-7 Lakh':
        return 6  # Midpoint of 5-7 Lakh
    elif income_range == '7 Lakh+':
        return 8  # Assuming 8 Lakh as a representative value for 7 Lakh+
    else:
        return None # Handle any other cases

# Apply the function to the 'Family Income' column
df['Family Income Numeric'] = df['Family Income'].apply(income_to_numeric)

# Calculate the average family income using the new numeric column
average_family_income = df['Family Income Numeric'].mean()

print(f"Average Family Income (in Lakhs): {average_family_income}")

# Group by 'College Name' and calculate the mean 'CGPA' for each college
college_cgpa = df.groupby('College Name')['CGPA'].mean().sort_values(ascending=False)
# Select the top 5 colleges
top_5_colleges_cgpa = college_cgpa.head(5)
# Print the top 5 results
print("Top 5 Colleges by Average CGPA:")
print(top_5_colleges_cgpa)
# Create a bar plot of the top 5 colleges
plt.figure(figsize=(10, 6))
sns.barplot(x=top_5_colleges_cgpa.index, y=top_5_colleges_cgpa.values)
plt.title('Top 5 Colleges by Average CGPA')
plt.xlabel('College Name')
plt.ylabel('Average CGPA')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Find outliers in the 'Quantity' attribute using the Interquartile Range (IQR) method
if 'Quantity' in df.columns:
  Q1 = df['Quantity'].quantile(0.25)
  Q3 = df['Quantity'].quantile(0.75)
  IQR = Q3 - Q1

  # Define the lower and upper bounds for outlier detection
  lower_bound = Q1 - 1.5 * IQR
  upper_bound = Q3 + 1.5 * IQR

  # Identify outliers
  outliers = df[(df['Quantity'] < lower_bound) | (df['Quantity'] > upper_bound)]

  print("\nOutliers in 'Quantity' attribute:")
  display(outliers)

  # Optional: Visualize the distribution and outliers using a box plot
  plt.figure(figsize=(8, 6))
  sns.boxplot(x=df['Quantity'])
  plt.title('Box plot of Quantity')
  plt.xlabel('Quantity')
  plt.show()
else:
  print("The 'Quantity' column was not found in the DataFrame.")

# Group by 'City' and calculate the mean 'CGPA' for each city
city_cgpa = df.groupby('City')['CGPA'].mean().sort_values(ascending=False)

# Print the average CGPA for each city
print("Average CGPA of students from each city:")
print(city_cgpa)

# Create a bar plot for the average CGPA per city (can be many cities, consider top N if needed)
# For demonstration, plotting all cities
plt.figure(figsize=(12, 8))
sns.barplot(x=city_cgpa.index, y=city_cgpa.values, palette='viridis')
plt.title('Average CGPA by City')
plt.xlabel('City')
plt.ylabel('Average CGPA')
plt.xticks(rotation=90, ha='right') # Rotate labels for readability if many cities
plt.tight_layout()
plt.show()

# Calculate the correlation between 'Family Income Numeric' and 'CGPA'
correlation = df['Family Income Numeric'].corr(df['CGPA'])

print(f"\nCorrelation between Family Income and CGPA: {correlation:.2f}")

# Visualize the relationship using a scatter plot
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='Family Income Numeric', y='CGPA', alpha=0.6)
plt.title('Relationship between Family Income and CGPA')
plt.xlabel('Family Income (Numeric - Lakhs)')
plt.ylabel('CGPA')
plt.grid(True)
plt.show()

# You can also use a regression plot to see the trend
plt.figure(figsize=(10, 6))
sns.regplot(data=df, x='Family Income Numeric', y='CGPA', scatter_kws={'alpha':0.6})
plt.title('Regression Plot: Family Income vs. CGPA')
plt.xlabel('Family Income (Numeric - Lakhs)')
plt.ylabel('CGPA')
plt.grid(True)
plt.show()

# Interpretation of the correlation coefficient:
# - A value close to 1 indicates a strong positive linear relationship.
# - A value close to -1 indicates a strong negative linear relationship.
# - A value close to 0 indicates a weak or no linear relationship.

# Note: Correlation does not imply causation.

salary_analysis = df[['Expected salary (Lac)', 'CGPA', 'Family Income', 'Experience with python (Months)']].dropna()

# Convert Family Income into ordered category
income_order = ['0-2 Lakh', '2-5 Lakh', '5-7 Lakh', '7 Lakh+']
salary_analysis['Family Income'] = pd.Categorical(salary_analysis['Family Income'], categories=income_order, ordered=True)

plt.figure(figsize=(10, 6))
sns.scatterplot(data=salary_analysis, x='CGPA', y='Expected salary (Lac)', hue='Family Income', palette='viridis')
plt.title("Expected Salary vs GPA colored by Family Income")
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(data=salary_analysis, x='Experience with python (Months)', y='Expected salary (Lac)', hue='Family Income', palette='plasma')
plt.title("Expected Salary vs Python Experience colored by Family Income")
plt.show()

event_counts = df['Events'].value_counts()
plt.figure(figsize=(12, 6))
sns.barplot(x=event_counts.index, y=event_counts.values, palette='coolwarm')
plt.xticks(rotation=90)
plt.title("Number of Students per Event")
plt.show()

leadership = df[['Leadership- skills', 'CGPA', 'Expected salary (Lac)']].dropna()

plt.figure(figsize=(10, 6))
sns.boxplot(x='Leadership- skills', y='CGPA', data=leadership)
plt.title("Leadership vs CGPA")
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(x='Leadership- skills', y='Expected salary (Lac)', data=leadership)
plt.title("Leadership vs Expected Salary")
plt.show()

graduates_2024 = df[df['Year of Graduation'] <= 2024]
print(f"Total students graduating by end of 2024: {graduates_2024.shape[0]}")

promotion_counts = df['How did you come to know about this event?'].value_counts()
plt.figure(figsize=(10, 6))
sns.barplot(x=promotion_counts.index, y=promotion_counts.values, palette='Set2')
plt.xticks(rotation=45)
plt.title("Promotion Channels")
plt.show()

ds_keywords = ['Data Science', 'Python', 'AI', 'Machine Learning']
ds_events = df[df['Events'].str.contains('|'.join(ds_keywords), case=False, na=False)]
print(f"Total students attended Data Science related events: {ds_events.shape[0]}")

high_cgpa_exp = df[(df['CGPA'] >= 8) & (df['Experience with python (Months)'] >= 6)]
avg_salary = high_cgpa_exp['Expected salary (Lac)'].mean()
print(f"Average salary for high CGPA & Python experience students: {avg_salary:.2f} LPA")

college_counts = df['College Name'].value_counts().head(5)
plt.figure(figsize=(12, 6))
sns.barplot(x=college_counts.index, y=college_counts.values, palette='magma')
plt.xticks(rotation=45)
plt.title("Top 5 Colleges by Participation")
plt.show()

print("\nTop 5 Colleges:\n", college_counts)

